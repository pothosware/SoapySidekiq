#!/usr/bin/env python3

"""
Transmits a tone out of the AIR-T. The script will create a tone segment that
is infinity repeatable without a phase discontinuity and with 8 samples per
period. The TX LO of the AIR-T is set such that the baseband frequency of the
generated tone plus the LO frequency will transmit at the desired RF.
"""
import sys
import time
import numpy as np
import argparse
import SoapySDR
from SoapySDR import *

#N = 8188
N = 8192
#N = (8188 * 4) + 32


def make_tone(n, fcen, fs, phi=0.285):
    """
    Generates tone signal window with a frequency that is an integer
    multiple of the sample rate so it can be repeated without a phase
    discontinuity.
    """
    period = fs / fcen
    #assert n % period == 0, 'Total samples not integer number of periods'
    a = 2**12
    # Make Complex Valued Tone Signal
    wt = np.array(2 * np.pi * fcen * np.arange(n) / fs)
    sig_cplx = np.exp(1j * (wt + phi))
    # Convert to interleaved int16 values
    sig_int16 = np.empty(2 * n, dtype=np.int16)
    sig_int16[0::2] = a * sig_cplx.real
    sig_int16[1::2] = a * sig_cplx.imag
    return sig_int16


def transmit_tone(freq=1e7, chan=0, fs=31.25, attenuation=20, buff_len=16384):
    """ Transmit a tone out of the Sidekiq """

    sdr = SoapySDR.Device()  
    SoapySDR.setLogLevel(SOAPY_SDR_TRACE)
#    SoapySDR.setLogLevel(SOAPY_SDR_ERROR)

    tx_stream = sdr.setupStream(SOAPY_SDR_TX, SOAPY_SDR_CS16, [chan])
    sdr.activateStream(tx_stream)  # this turns the radio on
    ##buff_len=(sdr.getStreamMTU(tx_stream)*4)

    buff_len = N
    print("buff_len", buff_len)

    # Generate tone buffer that can be repeated without phase discontinuity
    bb_freq = fs / 4  # baseband frequency of tone
    tx_buff = make_tone(buff_len, bb_freq, fs)
    lo_freq = freq   # Calc LO freq to put tone at tone_rf
    print("lo_freq", lo_freq, "tone_freq ", bb_freq, "buff_len", buff_len, "fs", fs, )

    # Setup Radio
    sdr.setSampleRate(SOAPY_SDR_TX, chan, fs)  # Set sample rate
    sdr.setBandwidth(SOAPY_SDR_TX, chan, fs)  
    sdr.setFrequency(SOAPY_SDR_TX, chan, lo_freq)  # Tune the LO
    sdr.setGain(SOAPY_SDR_TX, chan, attenuation)

    time_last_print = time.time()
    total_samps = 0

    ctr = 0
    # Transmit
    print('Now Transmitting a tone at ', (fs/4000000), "MHz above LO frequency")
    while True:
        try:
            rc = sdr.writeStream(tx_stream, [tx_buff], buff_len)
            if rc.ret != buff_len:
                print('TX Error {}: {}'.format(rc.ret, errToStr(rc.ret)))
        except KeyboardInterrupt:
            break
        total_samps += buff_len
        if time.time() > time_last_print + 5.0:
            rate = total_samps / (time.time() - time_last_print) / 1e6
            print("measured sample rate: %f Msps" % rate)
            total_samps = 0
            time_last_print = time.time()



    print("Stop streaming")
    sdr.deactivateStream(tx_stream)
    sdr.closeStream(tx_stream)


def parse_command_line_arguments():
    """ Create command line options for transmit function """
    help_formatter = argparse.ArgumentDefaultsHelpFormatter
    parser = argparse.ArgumentParser(description='Transmit a tone on the AIR-T',
                                     formatter_class=help_formatter)
    parser.add_argument('-f', type=float, required=False, dest='freq',
                        default=1000e6, help='Lo Frequency')
    parser.add_argument('-c', type=int, required=False, dest='chan',
                        default=0, help='TX Channel Number [0 or 1]')
    parser.add_argument('-s', type=float, required=False, dest='fs',
                        default=40e6, help='TX Sample Rate')
    parser.add_argument('-a', type=float, required=False, dest='attenuation',
                        default=0, help='TX attenuation')
    parser.add_argument('-n', type=int, required=False, dest='buff_len',
                        default=16384, help='TX Buffer Size')
    return parser.parse_args(sys.argv[1:])


if __name__ == '__main__':
    pars = parse_command_line_arguments()
    transmit_tone(pars.freq, pars.chan, pars.fs, pars.attenuation, pars.buff_len)
