#!/bin/python3

import sys
import time
import numpy as np
from matplotlib import pyplot as plt
import SoapySDR
print(SoapySDR, __file__)
from SoapySDR import *

np.set_printoptions(threshold=sys.maxsize)

############################################################################################
# Settings
############################################################################################
# Data transfer settings
NUM_BUFF = 10
rx_chan = 0             # RX1 = 0, RX2 = 1
fs = 10e6            # Radio sample Rate
freq = 100e6            # LO tuning frequency in Hz
use_agc = False          # Use or don't use the AGC
timeout_us = int(10e6)
rx_resolution = 12
max_data = (1 << (rx_resolution -1))-1
print(max_data)
SCALE = max_data + 1

############################################################################################
# Receive Signal
############################################################################################
sdr = SoapySDR.Device() 
SoapySDR.setLogLevel(SOAPY_SDR_TRACE)

sdr.writeSetting("counter", "true")
setting = sdr.readSetting("counter")
print("read counter", setting)

sdr.setSampleRate(SOAPY_SDR_RX, rx_chan, fs)          # Set sample rate
sdr.setBandwidth(SOAPY_SDR_RX, rx_chan, fs)          # Set sample rate
#sdr.setGainMode(SOAPY_SDR_RX, rx_chan, use_agc)       # Set the gain mode
sdr.setFrequency(SOAPY_SDR_RX, rx_chan, freq)         # Tune the LO

# Create data buffer and start streaming samples to it
rx_stream = sdr.setupStream(SOAPY_SDR_RX, SOAPY_SDR_CF32, [rx_chan])  # Setup data stream

# create a re-usable buffer for receiving samples
nb = sdr.getStreamMTU(rx_stream)
print("Stream MTU set to",  nb)

N = nb

buff = np.empty([NUM_BUFF, N], dtype=np.csingle)
intbuff = np.empty((N*2), dtype=np.int16)
real = np.zeros(N, dtype=np.int16)
imag = np.zeros(N, dtype=np.int16)

sdr.activateStream(rx_stream)  # this turns the radio on

for idx1 in range(NUM_BUFF):
    print("read block", idx1)

    sr = sdr.readStream(rx_stream, [buff[idx1]], N)

    rc = sr.ret # number of samples read or the error code
    assert rc == N, 'Error Reading Samples from Device (error code = %d)!' % rc

sdr.deactivateStream(rx_stream)
sdr.closeStream(rx_stream)

for i in range(NUM_BUFF):
    print("analyze block", i)

    real = buff[i].real * SCALE
    imag = buff[i].imag * SCALE

    intbuff[0::2] = real
    intbuff[1::2] = imag

    expected = intbuff[0]

    #validate samples
    for j in range(((2 * N) - 1)):
        this_value = intbuff[j]

        if (this_value != expected):
            print("bad value", j, "expected", expected, "value", this_value)

            #error print the buffer around the error
            for k in range(-5, 5):
                print((j + k), " ", intbuff[j+k])
            break

        expected = (this_value + 1)
        if expected == (max_data + 1):
            expected = -(max_data+1)

    if j >= ((2 * N - 1) - 1):
        print(" success")


